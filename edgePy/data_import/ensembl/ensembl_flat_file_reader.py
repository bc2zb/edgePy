from smart_open import smart_open
from typing import Optional, Union
from pathlib import Path


class ImportCanonicalData(object):
    """
    A simple tool for reading canonical data, generated from the canonical_transcripts.py script provided with edgePy.

    Args:
        filename: the name of the data file, generated by canonical_transcripts.py

    """

    def __init__(
        self,
        filename: Union[str, Path]
    ) -> None:

        self.by_transcript = {}
        self.canonical_transcript = {}

        with smart_open(filename, 'r') as data:
            for line in data:
                gene_info = line.strip().split("\t")
                gene = gene_info[0]
                transcript = gene_info[1]
                length = int(gene_info[2])
                canonical = True if gene_info[3] == "True" else False

                self.by_transcript[transcript] = {'len': length,
                                                  'can': canonical}

                if canonical:
                    self.canonical_transcript[gene] = transcript

    def is_canonical_by_transcript(self, transcript_id: str) -> bool:
        """
        Return a boolean indicating whether the supplied transcript is canonical or not.

        Args:
            transcript_id: an Ensembl transcript ID, starting with ENST
        """
        if transcript_id not in self.by_transcript:
            return False
        else:
            return self.by_transcript[transcript_id]['can']

    def get_canonical_transcript(self, gene_id: str) -> Optional[str]:
        """
        Return the Ensembl canonical transcript ID, given an ensembl transcript ID.

        Args:
            gene_id: An Ensembl gene ID, starting with ENSG
        """
        if gene_id in self.canonical_transcript:
            return self.canonical_transcript[gene_id]
        else:
            return None

    def get_length_of_transcript(self, transcript_id: str) -> int:
        """
        Return the length of a transcript, given an ensembl transcript ID.

        Args:
             transcript_id: an Ensembl transcript ID, starting with ENST
        """
        if transcript_id not in self.by_transcript:
            return False
        else:
            return self.by_transcript[transcript_id]['len']

    def get_length_of_canonical_transcript(self, gene_id: str) -> int:
        """
        Return the length of a transcript, given an ensembl gene ID.
        
        Args:
             gene_id: An Ensembl gene ID, starting with ENSG
        """
        transcript_id = self.get_canonical_transcript(gene_id)

        if not transcript_id or transcript_id not in self.by_transcript:
            return False
        else:
            return self.by_transcript[transcript_id]['len']
